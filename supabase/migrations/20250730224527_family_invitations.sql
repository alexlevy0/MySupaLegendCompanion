-- =====================================================
-- TABLE FAMILY_INVITATIONS - INVITATIONS FAMILIALES
-- =====================================================

CREATE TABLE IF NOT EXISTS family_invitations (
  id uuid default gen_random_uuid() primary key,
  counter bigint generated by default as identity,
  
  -- Références
  senior_id uuid references seniors(id) on delete cascade not null,
  inviter_id uuid references users(id) on delete cascade not null,
  
  -- Données d'invitation
  email varchar not null,
  relationship varchar not null,
  access_level varchar default 'standard' check (access_level in ('minimal', 'standard', 'full')),
  notification_preferences jsonb,
  
  -- Status et tracking
  status varchar default 'pending' check (status in ('pending', 'accepted', 'expired', 'revoked')),
  accepted_by uuid references users(id),
  accepted_at timestamptz,
  expires_at timestamptz not null,
  
  -- Metadata pour l'email
  invitation_metadata jsonb, -- Stocke les infos pour le template d'email
  
  -- Timestamps
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  deleted boolean default false,
  
  -- Contraintes
  unique(senior_id, email, status) -- Éviter les doublons d'invitations actives
);

-- Index pour les performances
CREATE INDEX IF NOT EXISTS idx_family_invitations_senior_id ON family_invitations(senior_id);
CREATE INDEX IF NOT EXISTS idx_family_invitations_inviter_id ON family_invitations(inviter_id);
CREATE INDEX IF NOT EXISTS idx_family_invitations_email ON family_invitations(email);
CREATE INDEX IF NOT EXISTS idx_family_invitations_status ON family_invitations(status);
CREATE INDEX IF NOT EXISTS idx_family_invitations_expires_at ON family_invitations(expires_at);

-- Trigger pour handle_times
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'handle_times_family_invitations') THEN
        CREATE TRIGGER handle_times_family_invitations
            BEFORE INSERT OR UPDATE ON family_invitations
            FOR EACH ROW
        EXECUTE PROCEDURE handle_times();
    END IF;
END $$;

-- RLS Policies
ALTER TABLE family_invitations ENABLE ROW LEVEL SECURITY;

-- Policy: Les inviteurs peuvent voir leurs propres invitations
CREATE POLICY "inviter_view_own_invitations" ON family_invitations
  FOR SELECT USING (
    inviter_id = auth.uid() OR
    is_admin()
  );

-- Policy: Les inviteurs peuvent créer des invitations
CREATE POLICY "inviter_create_invitations" ON family_invitations
  FOR INSERT WITH CHECK (
    inviter_id = auth.uid() AND
    EXISTS (
      SELECT 1 FROM family_members 
      WHERE user_id = auth.uid() 
      AND senior_id = family_invitations.senior_id
      AND deleted = false
    )
  );

-- Policy: Les inviteurs peuvent mettre à jour leurs invitations (révoquer, etc.)
CREATE POLICY "inviter_update_own_invitations" ON family_invitations
  FOR UPDATE USING (
    inviter_id = auth.uid() OR
    is_admin()
  )
  WITH CHECK (
    inviter_id = auth.uid() OR
    is_admin()
  );

-- Fonction pour nettoyer les invitations expirées (à exécuter périodiquement)
CREATE OR REPLACE FUNCTION cleanup_expired_invitations()
RETURNS void AS $$
BEGIN
  UPDATE family_invitations
  SET status = 'expired',
      updated_at = now()
  WHERE status = 'pending'
    AND expires_at < now();
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;